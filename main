task.spawn(function()
    if not game:IsLoaded() then game.Loaded:Wait() end

    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local Player = Players.LocalPlayer
    local PlaceId, JobId = game.PlaceId, game.JobId

    local RootFolder = "ServerHop"
    local StorageFile = `{RootFolder}/{PlaceId}.json`
    local Tracked = { Start = tick(), Jobs = {} }

    if not isfolder(RootFolder) then makefolder(RootFolder) end
    if isfile(StorageFile) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(StorageFile))
        end)
        if success and result and tick() - result.Start < 86400 then
            Tracked = result
        end
    end

    if not table.find(Tracked.Jobs, JobId) then
        table.insert(Tracked.Jobs, 1, JobId)
        pcall(function()
            writefile(StorageFile, HttpService:JSONEncode(Tracked))
        end)
    end

    local function ServerHopSmart()
        local triedServers, cursor = {}, ""

        local function fetchServers()
            local url = `https://games.roblox.com/v1/games/{PlaceId}/servers/Public?sortOrder=Asc&limit=100{cursor ~= "" and "&cursor="..cursor or ""}`
            local success, res = pcall(function() return game:HttpGet(url) end)
            if not success then return nil end
            local data = HttpService:JSONDecode(res)
            cursor = data.nextPageCursor or ""
            return data.data
        end

        while true do
            local servers = fetchServers()
            if not servers then break end

            for _, server in ipairs(servers) do
                local joinable = server.playing < server.maxPlayers
                    and not table.find(Tracked.Jobs, server.id)
                    and not table.find(triedServers, server.id)
                    and server.id ~= JobId

                if joinable then
                    table.insert(Tracked.Jobs, 1, server.id)
                    writefile(StorageFile, HttpService:JSONEncode(Tracked))
                    TeleportService:TeleportToPlaceInstance(PlaceId, server.id, Player)
                    return
                end
            end

            if cursor == "" then
                task.wait(2)
                triedServers = {}
            end
        end
    end

    -- GUI Setup
    local guiParent = Player:WaitForChild("PlayerGui", 5) or game:GetService("CoreGui")
    local screenGui = Instance.new("ScreenGui", guiParent)
    screenGui.Name = "ServerHopUI"
    screenGui.ResetOnSpawn, screenGui.IgnoreGuiInset = false, true

    local function CreateButtonFrame(position, text, onClick)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 150, 0, 45)
        frame.Position = position
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.BorderSizePixel = 0
        frame.Active, frame.Draggable = true, true
        frame.Parent = screenGui

        local button = Instance.new("TextButton", frame)
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Text = text
        button.TextColor3 = Color3.new(1, 1, 1)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 17
        button.AutoButtonColor = true

        button.MouseButton1Click:Connect(onClick)
    end

    CreateButtonFrame(UDim2.new(0.5, -160, 1, -130), "Rejoin Server", function()
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
    end)

    CreateButtonFrame(UDim2.new(0.5, 10, 1, -130), "Server Hop", ServerHopSmart)

    -- Sidebar for server history
    local sidebar = Instance.new("Frame", screenGui)
    sidebar.Size = UDim2.new(0, 270, 1, 0)
    sidebar.Position = UDim2.new(1, 0, 0, 0)
    sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    sidebar.BorderSizePixel = 0
    sidebar.ZIndex = 2

    local scroll = Instance.new("ScrollingFrame", sidebar)
    scroll.Size = UDim2.new(1, 0, 1, 0)
    scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
    scroll.ScrollBarThickness = 6
    scroll.BackgroundTransparency = 1
    scroll.ZIndex = 2

    local toggleBtn = Instance.new("TextButton", screenGui)
    toggleBtn.Text = "➤"
    toggleBtn.Size = UDim2.new(0, 30, 0, 60)
    toggleBtn.Position = UDim2.new(1, -35, 0.5, -30)
    toggleBtn.AnchorPoint = Vector2.new(0, 0.5)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.ZIndex = 3

    local sidebarOpen = false
    toggleBtn.MouseButton1Click:Connect(function()
        sidebarOpen = not sidebarOpen
        toggleBtn.Text = sidebarOpen and "◀" or "➤"
        local tween = TweenService:Create(
            sidebar,
            TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            { Position = sidebarOpen and UDim2.new(1, -270, 0, 0) or UDim2.new(1, 0, 0, 0) }
        )
        tween:Play()
    end)

    local function RefreshServerList()
        scroll:ClearAllChildren()
        local y = 5

        for _, id in ipairs(Tracked.Jobs) do
            local container = Instance.new("Frame", scroll)
            container.Size = UDim2.new(1, -10, 0, 45)
            container.Position = UDim2.new(0, 5, 0, y)
            container.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            container.BorderSizePixel = 0
            container.ZIndex = 2

            local label = Instance.new("TextLabel", container)
            label.Size = UDim2.new(1, -65, 1, 0)
            label.Position = UDim2.new(0, 5, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = `Server ID: {id}` .. (id == JobId and " [Current]" or "")
            label.TextColor3 = id == JobId and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.ZIndex = 2

            local joinBtn = Instance.new("TextButton", container)
            joinBtn.Size = UDim2.new(0, 50, 0, 25)
            joinBtn.Position = UDim2.new(1, -55, 0.5, -12)
            joinBtn.Text = "Join"
            joinBtn.Font = Enum.Font.GothamBold
            joinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            joinBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            joinBtn.TextSize = 14
            joinBtn.ZIndex = 2

            joinBtn.MouseButton1Click:Connect(function()
                TeleportService:TeleportToPlaceInstance(PlaceId, id, Player)
            end)

            y += 50
        end

        scroll.CanvasSize = UDim2.new(0, 0, 0, y)
    end

    RefreshServerList()
end)
