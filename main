-- ✅ Optimized Rejoin + ServerHop GUI (Persistent Cache + No Spam)

task.spawn(function()
    if not game:IsLoaded() then game.Loaded:Wait() end

    local Config = {
        MaxStore = 3600,        -- max cache time in seconds
        CheckInterval = 2500,   -- ms between server list requests
        TeleportInterval = 1000 -- ms between teleport attempts
    }

    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local PlaceId = game.PlaceId
    local JobId = game.JobId

    local function ServerHop()
        local RootFolder = "ServerHop"
        local StorageFile = `{RootFolder}/{tostring(PlaceId)}.json`
        local Data = { Start = tick(), Jobs = {} }

        if not isfolder(RootFolder) then makefolder(RootFolder) end

        if isfile(StorageFile) then
            local NewData = HttpService:JSONDecode(readfile(StorageFile))
            if tick() - NewData.Start < Config.MaxStore then
                Data = NewData
            end
        end

        if not table.find(Data.Jobs, JobId) then
            table.insert(Data.Jobs, JobId)
        end

        writefile(StorageFile, HttpService:JSONEncode(Data))

        local Servers = {}
        local Cursor = ""

        while Cursor and #Servers <= 0 and task.wait(Config.CheckInterval / 1000) do
            local Request = request or syn.request or http and http.request or HttpService.RequestAsync
            local Success, Response = pcall(Request, {
                Url = `https://games.roblox.com/v1/games/{PlaceId}/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true&cursor={Cursor}`,
                Method = "GET"
            })

            if not Success then continue end

            local Decode, Body = pcall(HttpService.JSONDecode, HttpService, Response.Body)
            if not Decode or not Body or not Body.data then continue end

            for _, Server in ipairs(Body.data) do
                if typeof(Server) == "table" and Server.id and Server.playing and Server.maxPlayers then
                    if Server.playing < Server.maxPlayers and not table.find(Data.Jobs, Server.id) then
                        table.insert(Servers, Server.id)
                    end
                end
            end

            Cursor = Body.nextPageCursor
        end

        while #Servers > 0 and task.wait(Config.TeleportInterval / 1000) do
            local id = Servers[math.random(1, #Servers)]
            TeleportService:TeleportToPlaceInstance(PlaceId, id, Player)
        end
    end

    -- ✅ GUI
    local guiParent = Player:WaitForChild("PlayerGui", 5) or game:GetService("CoreGui")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ServerHopUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = guiParent

    local function CreateButtonFrame(position, text, callback)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 150, 0, 45)
        frame.Position = position
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.BorderSizePixel = 0
        frame.Active = true
        frame.Draggable = true
        frame.Parent = screenGui

        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Text = text
        button.TextColor3 = Color3.new(1, 1, 1)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 17
        button.AutoButtonColor = true
        button.Parent = frame

        button.MouseButton1Click:Connect(callback)
    end

    -- Rejoin Server button
    CreateButtonFrame(
        UDim2.new(0.5, -160, 1, -130),
        "Rejoin Server",
        function()
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
        end
    )

    -- Server Hop button
    CreateButtonFrame(
        UDim2.new(0.5, 10, 1, -130),
        "Server Hop",
        function()
            ServerHop()
        end
    )
end)
