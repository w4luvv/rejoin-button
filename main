task.spawn(function()
    if not game:IsLoaded() then game.Loaded:Wait() end

    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local PlaceId = game.PlaceId
    local JobId = game.JobId

    local RootFolder = "ServerHop"
    local StorageFile = `{RootFolder}/{PlaceId}.json`
    local Tracked = { Start = tick(), Jobs = {} }

    if not isfolder(RootFolder) then makefolder(RootFolder) end
    if isfile(StorageFile) then
        local data = HttpService:JSONDecode(readfile(StorageFile))
        if tick() - data.Start < 3600 then
            Tracked = data
        end
    end
    if not table.find(Tracked.Jobs, JobId) then
        table.insert(Tracked.Jobs, JobId)
        writefile(StorageFile, HttpService:JSONEncode(Tracked))
    end

    local function ServerHopSmart()
        local cursor = ""
        local triedServers = {}

        local function fetchServers()
            local url = `https://games.roblox.com/v1/games/{PlaceId}/servers/Public?sortOrder=Asc&limit=100{cursor ~= "" and "&cursor="..cursor or ""}`
            local success, res = pcall(function() return game:HttpGet(url) end)
            if not success then return nil end
            local data = HttpService:JSONDecode(res)
            cursor = data.nextPageCursor or ""
            return data.data
        end

        while true do
            local servers = fetchServers()
            if not servers then break end

            for _, server in ipairs(servers) do
                local isJoinable = server.playing < server.maxPlayers
                    and not table.find(Tracked.Jobs, server.id)
                    and not table.find(triedServers, server.id)
                    and server.id ~= JobId

                if isJoinable then
                    table.insert(Tracked.Jobs, server.id)
                    table.insert(triedServers, server.id)
                    writefile(StorageFile, HttpService:JSONEncode(Tracked))

                    local success = pcall(function()
                        TeleportService:TeleportToPlaceInstance(PlaceId, server.id, Player)
                    end)

                    if success then return end
                end
            end

            if cursor == "" then
                warn("No valid server found, retrying...")
                task.wait(2)
                cursor = ""
                triedServers = {}
            end
        end
    end

    -- GUI
    local guiParent = Player:WaitForChild("PlayerGui", 5) or game:GetService("CoreGui")
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ServerHopUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = guiParent

    local function CreateButtonFrame(position, text, onClick)
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 150, 0, 45)
        frame.Position = position
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.BorderSizePixel = 0
        frame.Active = true
        frame.Draggable = true
        frame.Parent = screenGui

        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Text = text
        button.TextColor3 = Color3.new(1, 1, 1)
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        button.Font = Enum.Font.GothamBold
        button.TextSize = 17
        button.AutoButtonColor = true
        button.Parent = frame

        button.MouseButton1Click:Connect(onClick)
    end

    -- Buttons
    CreateButtonFrame(
        UDim2.new(0.5, -160, 1, -130),
        "Rejoin Server",
        function()
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
        end
    )

    CreateButtonFrame(
        UDim2.new(0.5, 10, 1, -130),
        "Server Hop",
        function()
            ServerHopSmart()
        end
    )
end)
